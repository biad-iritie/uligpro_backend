// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   String @id @default(uuid()) @map("_id")
  name String @unique
  user User[]
}

model User {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  email     String   @unique
  tel       String   @unique
  password  String
  confirmed Boolean  @default(false)
  createdAt DateTime @default(now())
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  ticket    Ticket[]
}

model Venue {
  id      String  @id @default(uuid()) @map("_id")
  name    String  @unique
  address String
  event   Event[]
}

model Event {
  id        String    @id @default(uuid()) @map("_id")
  name      String
  date      DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  evenueId  String
  venue     Venue     @relation(fields: [evenueId], references: [id])

  ticket_categoryOnEvent Ticket_categoryOnEvent[]
  match                  Match[]
  tickets                Ticket[]
}

model Ticket_category {
  id                     String                   @id @default(uuid()) @map("_id")
  name                   String                   @unique
  ticket_categoryOnEvent Ticket_categoryOnEvent[]
  tickets                Ticket[]
}

model Ticket_categoryOnEvent {
  eventId           String
  event             Event           @relation(fields: [eventId], references: [id])
  ticket_categoryId String
  ticket_category   Ticket_category @relation(fields: [ticket_categoryId], references: [id])
  price             Int
  capacity          Int
  ticket_sold       Int             @default(0)

  @@id([eventId, ticket_categoryId])
}

model Team {
  id         String  @id @default(uuid()) @map("_id")
  name       String
  logo       String
  university String
  matchHome  Match[] @relation("team home")
  matchAway  Match[] @relation("team away")
  match      Match[]
}

model Match {
  time         String
  team1Id      String
  team1        Team    @relation("team home", fields: [team1Id], references: [id])
  team2Id      String
  team2        Team    @relation("team away", fields: [team2Id], references: [id])
  goal1        Int
  goal2        Int
  teamWinner   Team?   @relation(fields: [teamIdWinner], references: [id])
  teamIdWinner String?
  eventId      String
  event        Event   @relation(fields: [eventId], references: [id])

  @@id([team1Id, team2Id, eventId])
}

model Transaction {
  id          String   @id @default(uuid()) @map("_id")
  code        String   @unique
  amount      Int
  debitNumber String
  way         String
  didAt       DateTime
  tickets     Ticket[]
}

model Ticket {
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  eventId           String
  event             Event           @relation(fields: [eventId], references: [id])
  transactionId     String
  transaction       Transaction     @relation(fields: [transactionId], references: [id])
  code              String          @unique
  ticket_categoryId String
  ticket_category   Ticket_category @relation(fields: [ticket_categoryId], references: [id])
  scanned           Boolean?        @default(false)
  scannedAt         DateTime?
  createdAt         DateTime?       @default(now())

  @@id([eventId, transactionId, code])
}
