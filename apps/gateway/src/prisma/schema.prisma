generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native", "darwin-arm64", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id   String @id @default(uuid()) @map("_id")
  name String @unique
  user User[]
}

model User {
  id            String   @id @default(uuid()) @map("_id")
  name          String
  email         String   @unique
  tel           String   @unique
  password      String
  confirmed     Boolean  @default(false)
  createdAt     DateTime @default(now())
  roleId        String
  ticketScanned Ticket[] @relation("Scanner")
  ticket        Ticket[]
  role          Role     @relation(fields: [roleId], references: [id])
}

model Venue {
  id      String  @id @default(uuid()) @map("_id")
  name    String  @unique
  address String
  event   Event[]
}

model Event {
  id                     String                   @id @default(uuid()) @map("_id")
  name                   String
  date                   DateTime
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime?
  evenueId               String
  onSell                 Boolean                  @default(false)
  display                Boolean                  @default(false)
  venue                  Venue                    @relation(fields: [evenueId], references: [id])
  matches                Match[]
  tickets                Ticket[]
  ticket_categoryOnEvent Ticket_categoryOnEvent[]
}

model Ticket_category {
  id                     String                   @id @default(uuid()) @map("_id")
  name                   String                   @unique
  tickets                Ticket[]
  ticket_categoryOnEvent Ticket_categoryOnEvent[]
}

model Ticket_categoryOnEvent {
  eventId           String
  ticket_categoryId String
  price             Int
  capacity          Int
  ticket_sold       Int             @default(0)
  event             Event           @relation(fields: [eventId], references: [id])
  ticket_category   Ticket_category @relation(fields: [ticket_categoryId], references: [id])

  @@id([eventId, ticket_categoryId])
}

model Team {
  id         String  @id @default(uuid()) @map("_id")
  name       String
  logo       String
  university String
  matchHome  Match[] @relation("team home")
  matchAway  Match[] @relation("team away")
  match      Match[]
}

model Match {
  time         String
  team1Id      String
  team2Id      String
  goal1        Int
  goal2        Int
  teamIdWinner String?
  eventId      String
  event        Event   @relation(fields: [eventId], references: [id])
  team1        Team    @relation("team home", fields: [team1Id], references: [id])
  team2        Team    @relation("team away", fields: [team2Id], references: [id])
  teamWinner   Team?   @relation(fields: [teamIdWinner], references: [id])

  @@id([team1Id, team2Id, eventId])
}

model Transaction {
  id          String   @id @default(uuid()) @map("_id")
  code        String   @unique
  amount      Int
  debitNumber String
  way         String
  didAt       DateTime
  tickets     Ticket[]
}

model Ticket {
  userId            String
  eventId           String
  transactionId     String
  code              String          @unique @default(uuid())
  ticket_categoryId String
  scanned           Boolean?        @default(false)
  scannedAt         DateTime?
  createdAt         DateTime?       @default(now())
  scannedByUserId   String?
  event             Event           @relation(fields: [eventId], references: [id])
  scannedByUser     User?           @relation("Scanner", fields: [scannedByUserId], references: [id])
  ticket_category   Ticket_category @relation(fields: [ticket_categoryId], references: [id])
  transaction       Transaction     @relation(fields: [transactionId], references: [id])
  user              User            @relation(fields: [userId], references: [id])

  @@id([eventId, transactionId, code])
}
